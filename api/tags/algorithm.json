{"name":"algorithm","slug":"algorithm","count":4,"postlist":[{"title":"Dijkstra","uid":"7ff27b21dc778d80ff5e8e51d9209bee","slug":"Dijkstra","date":"2022-03-08T15:28:56.000Z","updated":"2022-03-12T12:27:35.039Z","comments":true,"path":"api/articles/Dijkstra.json","keywords":null,"cover":null,"text":"单源最短路径 &#x2F;* ·给定邻接矩阵G[][] ·定义：1、int数组dis[]记录源点到各个节点最短距离。 2、bool数组fin[]记录各节点是否已经找到最小距离 ·初始化：dis[源点]&#x3D;0、dis[其余]&#x3D;Inf ;fin[源点]&#x3D;t...","link":"","photos":[],"count_time":{"symbolsCount":"4k","symbolsTime":"4 mins."},"categories":[],"tags":[{"name":"algorithm","slug":"algorithm","count":4,"path":"api/tags/algorithm.json"}],"author":{"name":"Lkh","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"二分查找","uid":"d843ced03f40ac612213952de4b63ad2","slug":"二分查找","date":"2022-03-07T14:29:22.000Z","updated":"2022-03-07T15:46:12.925Z","comments":true,"path":"api/articles/二分查找.json","keywords":null,"cover":null,"text":"·二分查找 浅查一下吧&#x2F;&#x2F;查找有序表中第一个出现的元素K（lower&#x3D;1）,最后一个出现的元素K(lower&#x3D;1) int BiSearch(int A[],int K,int lower) &#123; int left&#x3D;0 ,...","link":"","photos":[],"count_time":{"symbolsCount":727,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"algorithm","slug":"algorithm","count":4,"path":"api/tags/algorithm.json"}],"author":{"name":"Lkh","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"并查集","uid":"c18469ab20e7b093d36b4a61728d07eb","slug":"并查集","date":"2022-03-07T04:28:31.000Z","updated":"2022-03-07T14:55:02.444Z","comments":true,"path":"api/articles/并查集.json","keywords":null,"cover":null,"text":" 树与图 并 Union 查 Find 集 Set 利用数组 int father[N] 来实现并查集产生的每一个集合都是一棵树，即不会产生环。 操作1、 初始化 初始化 father[]数组，一开始每一个元素都是一个集合（自成孤岛），令father[i] &#x3D; i; f...","link":"","photos":[],"count_time":{"symbolsCount":662,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"algorithm","slug":"algorithm","count":4,"path":"api/tags/algorithm.json"}],"author":{"name":"Lkh","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"简单算法模板","uid":"dca193cd3708bfa4a4816acdfe93287d","slug":"简单算法模板","date":"2022-03-02T04:48:03.000Z","updated":"2022-03-13T14:30:40.734Z","comments":true,"path":"api/articles/简单算法模板.json","keywords":null,"cover":null,"text":" This is a template of sample algorithm that records my pushing process ·树定义与构造函数struct BiTree&#123; char data; struct BiTree *lchild; struc...","link":"","photos":[],"count_time":{"symbolsCount":"5k","symbolsTime":"5 mins."},"categories":[],"tags":[{"name":"algorithm","slug":"algorithm","count":4,"path":"api/tags/algorithm.json"}],"author":{"name":"Lkh","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}]}