{"title":"动态规划","uid":"f6af5bf3fb5f66f52237908153c03aea","slug":"动态规划","date":"2022-03-02T10:48:14.000Z","updated":"2022-08-01T07:07:05.152Z","comments":true,"path":"api/articles/动态规划.json","keywords":null,"cover":null,"content":"<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><strong>例：用2、5、7元硬币凑出正好27元，且要求硬币数量最少。</strong><br>##1、类型</p></blockquote>\n<ul>\n<li><strong>计数型</strong></li>\n<li><strong>最值型</strong></li>\n<li><strong>存在型</strong><span id=\"more\"></span></li>\n</ul>\n<h2 id=\"2、思路与步骤\"><a href=\"#2、思路与步骤\" class=\"headerlink\" title=\"2、思路与步骤\"></a>2、思路与步骤</h2><h3 id=\"①确定状态\"><a href=\"#①确定状态\" class=\"headerlink\" title=\"①确定状态\"></a>①确定状态</h3><p><em>1、</em>f(x)或者f(x)(y)代表什么：凑出x元所需最少硬币数量<br><em>2、</em>最后一步代表什么； $a_1 + a_2 + a_3\\cdots+a_k$ ,最后一枚硬币$a_k$</p>\n<p><em>3、</em>化为问题相同但是规模更小的子问题: $27-a_k$最少由k-1枚硬币凑成</p>\n<h3 id=\"②确定转移方程\"><a href=\"#②确定转移方程\" class=\"headerlink\" title=\"②确定转移方程\"></a>②确定转移方程</h3><p>$$f[27] &#x3D; min{f[27-2],f[27-5],f[27-7]} $$</p>\n<h3 id=\"③确定初始条件与边界\"><a href=\"#③确定初始条件与边界\" class=\"headerlink\" title=\"③确定初始条件与边界\"></a>③确定初始条件与边界</h3><ul>\n<li>x-2,x-5,x-7小于零的时候说明凑不出来Y，令f[Y]&#x3D;+∞</li>\n<li>f[0] &#x3D; 0</li>\n</ul>\n<h3 id=\"④确定运算顺序\"><a href=\"#④确定运算顺序\" class=\"headerlink\" title=\"④确定运算顺序\"></a>④确定运算顺序</h3><h2 id=\"3、背包九讲\"><a href=\"#3、背包九讲\" class=\"headerlink\" title=\"3、背包九讲\"></a>3、背包九讲</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>基础背包问题：有N件物品和一个容量为V的背包。第i件物品的体积是v[i]，价值是w[i]。求解将哪些物品装入背包可使这些物品的体积总和不超过背包容量，且价值总和最大。</p>\n<p>特点：每种物品仅有一件，可以选择放或不放。</p></blockquote>\n<h3 id=\"类型\"><a href=\"#类型\" class=\"headerlink\" title=\"类型\"></a>类型</h3><ul>\n<li>0–1背包：每个物品只有一个</li>\n<li>完全背包：每个物品无限多个</li>\n<li>多重背包：每个物品特定数量</li>\n<li>混合背包：</li>\n<li>二维费用的背包</li>\n<li>分组背包</li>\n<li>背包问题求方案数</li>\n<li>最优物品选择方案</li>\n<li>有依赖的背包</li>\n</ul>\n","text":" 例：用2、5、7元硬币凑出正好27元，且要求硬币数量最少。##1、类型 计数型 最值型 存在型 2、思路与步骤①确定状态1、f(x)或者f(x)(y)代表什么：凑出x元所需最少硬币数量2、最后一步代表什么； $a_1 + a_2 + a_3\\cdots+a_k$ ,最后一枚硬币...","link":"","photos":[],"count_time":{"symbolsCount":534,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"动态规划","slug":"动态规划","count":1,"path":"api/tags/动态规划.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2%E3%80%81%E6%80%9D%E8%B7%AF%E4%B8%8E%E6%AD%A5%E9%AA%A4\"><span class=\"toc-text\">2、思路与步骤</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E2%91%A0%E7%A1%AE%E5%AE%9A%E7%8A%B6%E6%80%81\"><span class=\"toc-text\">①确定状态</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E2%91%A1%E7%A1%AE%E5%AE%9A%E8%BD%AC%E7%A7%BB%E6%96%B9%E7%A8%8B\"><span class=\"toc-text\">②确定转移方程</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E2%91%A2%E7%A1%AE%E5%AE%9A%E5%88%9D%E5%A7%8B%E6%9D%A1%E4%BB%B6%E4%B8%8E%E8%BE%B9%E7%95%8C\"><span class=\"toc-text\">③确定初始条件与边界</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E2%91%A3%E7%A1%AE%E5%AE%9A%E8%BF%90%E7%AE%97%E9%A1%BA%E5%BA%8F\"><span class=\"toc-text\">④确定运算顺序</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3%E3%80%81%E8%83%8C%E5%8C%85%E4%B9%9D%E8%AE%B2\"><span class=\"toc-text\">3、背包九讲</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">类型</span></a></li></ol></li></ol>","author":{"name":"Lkh","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"并查集","uid":"c18469ab20e7b093d36b4a61728d07eb","slug":"并查集","date":"2022-03-07T04:28:31.000Z","updated":"2022-03-07T14:55:02.444Z","comments":true,"path":"api/articles/并查集.json","keywords":null,"cover":null,"text":" 树与图 并 Union 查 Find 集 Set 利用数组 int father[N] 来实现并查集产生的每一个集合都是一棵树，即不会产生环。 操作1、 初始化 初始化 father[]数组，一开始每一个元素都是一个集合（自成孤岛），令father[i] &#x3D; i; f...","link":"","photos":[],"count_time":{"symbolsCount":662,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"algorithm","slug":"algorithm","count":4,"path":"api/tags/algorithm.json"}],"author":{"name":"Lkh","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{}}