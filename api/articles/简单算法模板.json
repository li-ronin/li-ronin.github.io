{"title":"简单算法模板","uid":"dca193cd3708bfa4a4816acdfe93287d","slug":"简单算法模板","date":"2022-03-02T04:48:03.000Z","updated":"2022-03-13T14:30:40.734Z","comments":true,"path":"api/articles/简单算法模板.json","keywords":null,"cover":null,"content":"<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>This is a template of sample algorithm that records my pushing process</p>\n<span id=\"more\"></span></blockquote>\n<h1 id=\"·树\"><a href=\"#·树\" class=\"headerlink\" title=\"·树\"></a>·树</h1><h3 id=\"定义与构造函数\"><a href=\"#定义与构造函数\" class=\"headerlink\" title=\"定义与构造函数\"></a>定义与构造函数</h3><pre class=\"line-numbers language-C++\" data-language=\"C++\"><code class=\"language-C++\">struct BiTree&#123;\n     char data;\n     struct BiTree *lchild;\n     struct BiTree *rchild;\n     BiTree(char c):data(c),lchild(NULL),rchild(NULL)&#123;&#125;\n     BiTree(char c,BiTree *L,BiTree *R):data(c),lchild(L),rchild(R)&#123;&#125;\n&#125;;</code></pre>\n<h3 id=\"建树\"><a href=\"#建树\" class=\"headerlink\" title=\"建树\"></a>建树</h3><pre class=\"line-numbers language-C++\" data-language=\"C++\"><code class=\"language-C++\">&#x2F;&#x2F;已知先序遍历(空节点用‘#’表示) 来建树\nBiTree* PreOrder_BulidTree(string str)\n&#123;\n     char c &#x3D; str[pos++];\n     if(c&#x3D;&#x3D;&#39;#&#39;)return NULL;\n     BiTree *root &#x3D; new BiTree(c);\n     root-&gt;left &#x3D; PreOrder_BulidTree(str);\n     root-&gt;right &#x3D; PreOrder_BulidTree(str);\n     return root;\n&#125;</code></pre>\n<h3 id=\"遍历\"><a href=\"#遍历\" class=\"headerlink\" title=\"遍历\"></a>遍历</h3><pre class=\"line-numbers language-C++\" data-language=\"C++\"><code class=\"language-C++\">void MidOrder(BiTree *root)&#x2F;&#x2F;中 ，前后同理。 层序见BFS\n&#123;\n     \tif(root &#x3D;&#x3D; NULL)return ;\n     \tMidOrder(root-&gt;lchild);\n     \tcout&lt;&lt;root-&gt;data;\n     \tMidOrder(root-&gt;rchild);\n&#125;</code></pre>\n<h3 id=\"DFS\"><a href=\"#DFS\" class=\"headerlink\" title=\"DFS\"></a>DFS</h3><pre class=\"line-numbers language-C++\" data-language=\"C++\"><code class=\"language-C++\">void DFS(int node) &#x2F;&#x2F;图\n&#123;\n     visit[node] &#x3D; true;\n     for(int i&#x3D;0;i&lt;n;i++)\n     &#123;\n       if(visit[i]&#x3D;&#x3D;false &amp;&amp; G[node][i]!&#x3D;Ifo)\n       \tDFS(i);\n     &#125;\n&#125;\n&#x2F;&#x2F;DFS求二叉树高度\nint maxdeep(BiTree *root)\n&#123;\n     if(root &#x3D;&#x3D; NULL)return 0;\n     return max(maxdeep(root-&gt;lchild),maxdeep(root-&gt;rchild))+1;\n&#125;\n&#x2F;&#x2F;DFS判断平衡二叉树高度是否平衡\nbool isbalance(BiTree *root)\n&#123;\n     if(root &#x3D;&#x3D; NULL)return true;\n     return abs(maxdeep(root-&gt;lchild)-maxdeep(root-&gt;rchild))&lt;&#x3D;1 &amp;&amp; isbalance(root-&gt;lchild) &amp;&amp; isbalance(root-&gt;rchild);\n&#125;</code></pre>\n<ul>\n<li>习题<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><a href=\"https://leetcode-cn.com/problems/same-tree/\">100. Same Tree</a><br><a href=\"https://leetcode-cn.com/problems/symmetric-tree/\">101. Symmetric Tree</a><br><a href=\"https://leetcode-cn.com/problems/balanced-binary-tree/\">110. Balanced Binary Tree</a><br><a href=\"https://leetcode-cn.com/problems/binary-tree-paths/\">257. Binary Tree Paths</a><br><a href=\"https://pintia.cn/problem-sets/994805342720868352/problems/994805500414115840\">1013 Battle Over Cities</a></p></blockquote>\n</li>\n</ul>\n<h3 id=\"BFS\"><a href=\"#BFS\" class=\"headerlink\" title=\"BFS\"></a>BFS</h3><pre class=\"line-numbers language-C++\" data-language=\"C++\"><code class=\"language-C++\">void BFS(BiTree *root)\n&#123;\n     queue&lt;BiTree*&gt;Q;\n     Q.push(root);\n     int level&#x3D;0;\n     while(!Q.empty())\n     &#123;\n       int size &#x3D; Q.size();\n       for(int i&#x3D;0;i&lt;size;i++)\n       &#123;\n       \tBiTree *temp &#x3D; Q.front();\n       \tQ.pop();\n       \tif(temp-&gt;lchild !&#x3D; NULL)Q.push(temp-&gt;lchild);\n       \tif(temp-&gt;rchild !&#x3D; NULL)Q.push(temp-&gt;rchild);\n       &#125;\n       level++;\n     &#125;\n&#125;</code></pre>\n\n<h1 id=\"·-sort\"><a href=\"#·-sort\" class=\"headerlink\" title=\"· sort\"></a>· sort</h1><h3 id=\"快排\"><a href=\"#快排\" class=\"headerlink\" title=\"快排\"></a>快排</h3><pre class=\"line-numbers language-C++\" data-language=\"C++\"><code class=\"language-C++\">int Partition(int A[],int low,int high)\n&#123;\n     int pivot &#x3D; A[low];\n     while(low&lt;high)\n     &#123;\n       while(low&lt;high &amp;&amp; A[high]&gt;pivot)high--;\n       A[low] &#x3D; A[high];\n       while(low&lt;high &amp;&amp; A[low]&lt;pivot)low++;\n       A[high] &#x3D; A[low];\n     &#125;\n     A[low] &#x3D; pivot;\n     return low;\n&#125;\nvoid FastSort(int A[],int low,int high)\n&#123;\n     if(low&lt;high)\n     &#123;\n       int pivot &#x3D; Partition(A,low,high);\n       FastSort(A,low,pivot-1);\n       FastSort(A,pivot+1,high);\n     &#125;\n&#125;</code></pre>\n<h3 id=\"归并\"><a href=\"#归并\" class=\"headerlink\" title=\"归并\"></a>归并</h3><pre class=\"line-numbers language-C++\" data-language=\"C++\"><code class=\"language-C++\">&#x2F;&#x2F;A[]好像是伪代码\nint *B &#x3D; new int(high+1);\nvoid Merge(int A[],int low,int mid,int high)\n&#123;\n     for(int i&#x3D;low;i&lt;&#x3D;high;i++)\n     \tB[i] &#x3D; A[i];\n     int i&#x3D;low,j&#x3D;mid+1,k&#x3D;low;\n     while(i&lt;&#x3D;mid &amp;&amp; j&lt;&#x3D;high)\n     &#123;\n     \tif(A[i]&lt;A[j])\n     \t&#123;\n         B[k++] &#x3D; A[i++];\n     \t&#125;else\n     \t&#123;\n         B[k++] &#x3D; A[j++];\n     \t&#125;\n     &#125;\n     while(i&lt;&#x3D;mid)B[k++] &#x3D; A[i++];\n     while(j&lt;&#x3D;high)B[k++] &#x3D; A[j++];\n&#125;\nvoid MergeSort(int A[],int low,int high)\n&#123;\n     if(low&lt;high)\n     &#123;\n       mid &#x3D; (low+high)&#x2F;2;\n       MergeSort(A,low,mid);\n       MergeSort(A,mid+1,high);\n       Merge(A,low,mid,high);\n     &#125;\n&#125;</code></pre>\n<h3 id=\"Bubble\"><a href=\"#Bubble\" class=\"headerlink\" title=\"Bubble\"></a>Bubble</h3><pre class=\"line-numbers language-C++\" data-language=\"C++\"><code class=\"language-C++\">void Bubble(vector&lt;int&gt;&amp;v,int n)\n&#123;\n     for(int i&#x3D;0;i&lt;n;i++)\n     &#123;\n     \tint flag &#x3D; -1;\n       for(int j&#x3D;n-1;j&gt;i;j--)\n       &#123;\n         if(v[j]&lt;v[j-1])\n         &#123;\n           swap(v[j],v[j-1]);\n           flag &#x3D; 1;\n         &#125;\n       &#125;\n       if(flag&#x3D;&#x3D;-1)break;\n     &#125;\n&#125;</code></pre>\n\n\n<h1 id=\"·进制问题\"><a href=\"#·进制问题\" class=\"headerlink\" title=\"·进制问题\"></a>·进制问题</h1><h2 id=\"大数进制\"><a href=\"#大数进制\" class=\"headerlink\" title=\"大数进制\"></a>大数进制</h2><pre class=\"line-numbers language-C++\" data-language=\"C++\"><code class=\"language-C++\">&#x2F;&#x2F;从form进制 转换为 to进制 得到的res是逆置的 还需要颠倒一下\nstring conversion(string num,int from,int to)\n&#123;\n     string res&#x3D;&quot;&quot;;\n     int len&#x3D;num.length();\n     for(int i&#x3D;0;i&lt;len;)\n     &#123;\n     \tint k&#x3D;0;\n       for(int j&#x3D;i;j&lt;len;j++)\n       &#123;\n         int temp &#x3D; (k*from + num[j]-&#39;0&#39;)%to;\n         num[j] &#x3D; (k*from + num[j]-&#39;0&#39;)&#x2F;b + &#39;0&#39;;\n         k &#x3D; temp;\n       &#125;\n       res +&#x3D; (k+&#39;0&#39;);\n       while(num[i] &#x3D;&#x3D; &#39;0&#39;)i++;\n     &#125;\n     return res;\n&#125;</code></pre>\n\n<h1 id=\"·数字的旋转左移\"><a href=\"#·数字的旋转左移\" class=\"headerlink\" title=\"·数字的旋转左移\"></a>·数字的旋转左移</h1><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><strong>十进制整型在不转换为二进制的情况下对机器码循环左移（右同理），第11行※</strong></p></blockquote>\n<pre class=\"line-numbers language-C++\" data-language=\"C++\"><code class=\"language-C++\">int a,b;\ncin&gt;&gt;a&gt;&gt;b;&#x2F;&#x2F;保证a、b&lt; 65536，那么有效数字位数为低16位\nint flag&#x3D;false;\nfor(int i&#x3D;0;i&lt;16;i++)\n&#123;\n     if(a&#x3D;&#x3D;b)\n     &#123;\n       flag&#x3D;true;&#x2F;&#x2F;a和b在旋转左移任意位后是相等的\n       break;\n     &#125;\n     a &#x3D; (((a&gt;&gt;15)&amp;1)|(a&lt;&lt;1))&amp;0xffff;&#x2F;&#x2F;a的二进制旋转左移，无须将十进制转换为二进制就可以实现\n&#125;\nif(flag)cout&lt;&lt;&quot;a&#x3D;&#x3D;b&quot;&lt;&lt;endl;\nelse cout&lt;&lt;&quot;a!&#x3D;b&quot;&lt;&lt;endl;</code></pre>\n\n\n\n\n\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=1854105063&auto=0&height=66\"></iframe>\n\n\n\n\n","text":" This is a template of sample algorithm that records my pushing process ·树定义与构造函数struct BiTree&#123; char data; struct BiTree *lchild; struc...","link":"","photos":[],"count_time":{"symbolsCount":"5k","symbolsTime":"5 mins."},"categories":[],"tags":[{"name":"algorithm","slug":"algorithm","count":4,"path":"api/tags/algorithm.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%C2%B7%E6%A0%91\"><span class=\"toc-text\">·树</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%9A%E4%B9%89%E4%B8%8E%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">定义与构造函数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%BB%BA%E6%A0%91\"><span class=\"toc-text\">建树</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%81%8D%E5%8E%86\"><span class=\"toc-text\">遍历</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#DFS\"><span class=\"toc-text\">DFS</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#BFS\"><span class=\"toc-text\">BFS</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%C2%B7-sort\"><span class=\"toc-text\">· sort</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%BF%AB%E6%8E%92\"><span class=\"toc-text\">快排</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%BD%92%E5%B9%B6\"><span class=\"toc-text\">归并</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Bubble\"><span class=\"toc-text\">Bubble</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%C2%B7%E8%BF%9B%E5%88%B6%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">·进制问题</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A4%A7%E6%95%B0%E8%BF%9B%E5%88%B6\"><span class=\"toc-text\">大数进制</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%C2%B7%E6%95%B0%E5%AD%97%E7%9A%84%E6%97%8B%E8%BD%AC%E5%B7%A6%E7%A7%BB\"><span class=\"toc-text\">·数字的旋转左移</span></a></li></ol>","author":{"name":"Lkh","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"动态规划","uid":"f6af5bf3fb5f66f52237908153c03aea","slug":"动态规划","date":"2022-03-02T10:48:14.000Z","updated":"2022-08-01T07:07:05.152Z","comments":true,"path":"api/articles/动态规划.json","keywords":null,"cover":null,"text":" 例：用2、5、7元硬币凑出正好27元，且要求硬币数量最少。##1、类型 计数型 最值型 存在型 2、思路与步骤①确定状态1、f(x)或者f(x)(y)代表什么：凑出x元所需最少硬币数量2、最后一步代表什么； $a_1 + a_2 + a_3\\cdots+a_k$ ,最后一枚硬币...","link":"","photos":[],"count_time":{"symbolsCount":534,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"动态规划","slug":"动态规划","count":1,"path":"api/tags/动态规划.json"}],"author":{"name":"Lkh","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{}}